/*
  This grammar is partially based on the Windows PowerShell Language Specification (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-02),
  Ohm library's Ecmascript example in https://github.com/ohmjs/ohm/examples/ecmascript/src/es5.ohm,
  and Ray Toal's Intro to Ohm course (https://cs.lmu.edu/~ray/notes/introohm/).

  Ohm Library has an MIT License.
*/

PowerShell {
  input = inputElement+

  inputElement
    = whitespace | token

  space := whitespace | lineTerminator

  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

  token = reservedWord
    | variable
    // | command
    // | commandParameter
    // | commandArgumentToken
    | applySyntactic<Expression>
    | integerLiteral
    | realLiteral
    | stringLiteral
    // | typeLiteral

  variable = ~reservedWord identifierName
  identifierName = identifierStart identifierPart

  identifierStart = "$"
  identifierPart = alnum+

  reservedWord = keyword | nullLiteral

  keyword = | begin         | break         | catch      | class
    | continue       | data           | define      | do
    | dynamicparam   | else           | elseif      | end
    | exit           | filter         | finally     | for
    | foreach        | from           | function    | if
    | in             | inlinescript   | parallel    | param
    | process        | return         | switch      | throw
    | trap           | try            | until       | using
    | var            | while          | workflow

  begin = "begin" ~identifierPart
  break = "break" ~identifierPart
  catch = "catch" ~identifierPart
  class = "class" ~identifierPart
  continue = "continue" ~identifierPart
  data = "data" ~identifierPart
  define = "define" ~identifierPart
  do = "do" ~identifierPart
  dynamicparam = "dynamicparam" ~identifierPart
  else = "else" ~identifierPart
  elseif = "elseif" ~identifierPart
  end := "end" ~identifierPart
  exit = "exit" ~identifierPart
  filter = "filter" ~identifierPart
  finally = "finally" ~identifierPart
  for = "for" ~identifierPart
  from = "from" ~identifierPart
  foreach = "foreach" ~identifierPart
  function = "function" ~identifierPart
  if = "if" ~identifierPart
  in = "in" ~identifierPart
  inlinescript = "inlinescript" ~identifierPart
  parallel = "parallel" ~identifierPart
  param = "param" ~identifierPart
  process = "process" ~identifierPart
  return = "return" ~identifierPart
  switch = "switch" ~identifierPart
  throw = "throw" ~identifierPart
  trap = "trap" ~identifierPart
  try = "try" ~identifierPart
  until = "until" ~identifierPart
  using = "using" ~identifierPart
  var = "var" ~identifierPart
  while = "while" ~identifierPart
  workflow = "workflow" ~identifierPart

  literal = integerLiteral | realLiteral | booleanLiteral
  // TODO: complete all literal types

  //booleanLiteral = ("true" | "false") ~identifierPart
  booleanLiteral = "True" | "False" // TODO: automatic variable for bool ($true)
  nullLiteral = "null" ~identifierPart

  integerLiteral = 
    decimalDigit+
    // decimalIntegerLiteral // powershell spec
    // | hexadecimalIntegerLiteral

  // decimalIntegerLiteral = decimalDigit+ numericTypeSuffix* numericMultiplier*

  decimalDigit = "0".."9"
  // TODO: optimize decimalDigit with nonzero decimal logic from ES5 spec

  numericTypeSuffix =
    | longTypeSuffix
    | decimalTypeSuffix

  decimalTypeSuffix = "d"
  longTypeSuffix = "l"

  numericMultiplier = "kb" | "mb" | "gb" | "tb" | "pb"

  realLiteral =
    digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    // decimalDigit+ "." decimalDigit+ exponentPart* decimalTypeSuffix* numericMultiplier* // based on powershell spec

  // exponentPart = "e" sign* decimalDigit+

  // sign = "+" | "-"
  // TODO: exponents can have no signs

  stringLiteral =
    | expandableStringLiteral
    // | expandable-here-string-literal // multi-line double-quoted string literal
    | verbatimStringLiteral
    // | verbatim-here-string-literal // multi-line single-quoted string literal

  // The following follows the ES5 spec closer compared to the PowerShell spec
  expandableStringLiteral = "\"" any "\""

  verbatimStringLiteral = "'" any "'"
  // end following

  // TODO: logic for sting templating in expandable-string-literals


  // TODO: advanced arithmetic logic from EC5

  Expression = LogicalANDExpression

  LogicalORExpression = LogicalORExpression "||" LogicalANDExpression     --lor
    | LogicalANDExpression

  LogicalANDExpression = LogicalANDExpression "&&" AdditiveExpression     --land
    | EqualityExpression

  EqualityExpression = EqualityExpression "==" AdditiveExpression         --eq
    | AdditiveExpression

  AdditiveExpression = AdditiveExpression "+" MultiplicativeExpression    --add
    | AdditiveExpression "-" MultiplicativeExpression                     --sub
    | MultiplicativeExpression  

  MultiplicativeExpression = MultiplicativeExpression "*" literal         --mul
    | MultiplicativeExpression "/" literal                                --div
    | MultiplicativeExpression "%" literal                                --mod
    | PrimaryExpression

  PrimaryExpression = "(" Expression ")"                                --paren
    | literal
}
